package ru.itmo.ki40lf;
import ru.itmo.ki40lf.common.Request;
import ru.itmo.ki40lf.common.Response;
import ru.itmo.ki40lf.commands.Command;
import ru.itmo.ki40lf.resources.Dragon;
import ru.itmo.ki40lf.serverPart.ServerEnvironment;
import ru.itmo.ki40lf.serverPart.CollectionManager;
import ru.itmo.ki40lf.serverPart.CommandManager;
import ru.itmo.ki40lf.serverPart.FileManager;
import ru.itmo.ki40lf.userManager.UserManager;

import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Server {
    private static final int PORT = 12345;
    private static final ExecutorService threadPool = Executors.newCachedThreadPool();

    public static void main(String[] args) {
        ServerEnvironment environment = ServerEnvironment.getInstance();

        FileManager fileManager = new FileManager("dragons.csv");
        CollectionManager collectionManager = new CollectionManager();
        UserManager userManager = new UserManager();
        CommandManager commandManager = new CommandManager(userManager);

        environment.setFileManager(fileManager);
        environment.setCollectionManager(collectionManager);
        environment.setUserManager(userManager);
        environment.setCommandManager(commandManager);


        try (ServerSocket serverSocket = new ServerSocket(PORT)) {
            System.out.println("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É " + PORT);

            while (true) {
                Socket clientSocket = serverSocket.accept();
                System.out.println("–ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: " + clientSocket.getInetAddress());

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                threadPool.execute(() -> handleClient(clientSocket));
            }

        } catch (IOException e) {
            System.out.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: " + e.getMessage());
        }
    }

    private static void handleClient(Socket clientSocket) {
        try (
                ObjectOutputStream out = new ObjectOutputStream(clientSocket.getOutputStream());
                ObjectInputStream in = new ObjectInputStream(clientSocket.getInputStream())
        ) {
            System.out.println("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞...");

            CommandManager commandManager = ServerEnvironment.getInstance().getCommandManager();
            UserManager userManager = ServerEnvironment.getInstance().getUserManager();

            while (true) {
                try {
                    Object received = in.readObject();
                    if (!(received instanceof Request)) {
                        System.out.println("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞");
                        break;
                    }
                    Request request = (Request) received;

                    System.out.println("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: " + request.getMessage());

                    Command command = commandManager.getCommand(request.getMessage());
                    if (command == null) {
                        out.writeObject(new Response("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: " + request.getMessage()));
                        out.flush();
                        continue;
                    }

                    // üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                    if (command.needsAuthorization()) {
                        if (request.getCredentials() == null ||
                                !userManager.authenticate(
                                        request.getCredentials().getLogin(),
                                        request.getCredentials().getPassword())) {
                            out.writeObject(new Response("–û—à–∏–±–∫–∞: —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è."));
                            out.flush();
                            continue;
                        }
                    }

                    // ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
                    String result = command.execute(request);
                    Response response = new Response(result);
                    out.writeObject(response);
                    out.flush();

                    System.out.println("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É: " + result);

                } catch (ClassNotFoundException e) {
                    System.out.println("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞.");
                }
            }
        } catch (IOException e) {
            System.out.println("–ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: " + e.getMessage());
        } finally {
            try {
                clientSocket.close();
                System.out.println("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –∑–∞–∫—Ä—ã—Ç–æ.");
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}