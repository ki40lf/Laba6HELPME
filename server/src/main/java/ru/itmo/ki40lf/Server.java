package ru.itmo.ki40lf;

import ru.itmo.ki40lf.common.Request;
import ru.itmo.ki40lf.common.Response;
import ru.itmo.ki40lf.serverPart.CommandManager;
import ru.itmo.ki40lf.serverPart.CollectionManager;
import ru.itmo.ki40lf.serverPart.FileManager;
import ru.itmo.ki40lf.serverPart.ServerEnvironment;

import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Server {
    private static final int PORT = 12345;
    private static final ExecutorService threadPool = Executors.newCachedThreadPool();

    public static void main(String[] args) {
        // ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ServerEnvironment:
        ServerEnvironment environment = ServerEnvironment.getInstance();
        environment.setFileManager(new FileManager("D:/ITMO/dragons.csv"));
        environment.setCollectionManager(new CollectionManager(environment.getFileManager().readFromCSV()));
        environment.setCommandManager(new CommandManager());

        try (ServerSocket serverSocket = new ServerSocket(PORT)) {
            System.out.println("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É " + PORT);

            while (true) {
                Socket clientSocket = serverSocket.accept();
                System.out.println("–ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: " + clientSocket.getInetAddress());

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                threadPool.execute(() -> handleClient(clientSocket));
            }
        } catch (IOException e) {
            System.out.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: " + e.getMessage());
        }
    }

    /**
     * –ú–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
     */
    private static void handleClient(Socket clientSocket) {
        try (
                ObjectOutputStream out = new ObjectOutputStream(clientSocket.getOutputStream());
                ObjectInputStream in = new ObjectInputStream(clientSocket.getInputStream())
        ) {
            System.out.println("‚ö° –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞...");

            while (true) {
                try {
                    // –ß–∏—Ç–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ –ø–æ—Ç–æ–∫–∞
                    Object received = in.readObject();

                    if (received instanceof Request) {
                        Request request = (Request) received;
                        System.out.println("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: " + request.getMessage());

                        // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
                        CommandManager commandManager = ServerEnvironment.getInstance().getCommandManager();
                        String result = commandManager.startExecuting(request);

                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ –∫–ª–∏–µ–Ω—Ç—É
                        Response response = new Response(result);
                        out.writeObject(response);
                        out.flush();
                        System.out.println("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É: " + result);
                    } else {
                        System.out.println("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞, –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ—Ç–æ–∫–∞.");
                        break;
                    }
                } catch (ClassNotFoundException e) {
                    System.out.println("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞.");
                }
            }
        } catch (IOException e) {
            System.out.println("–ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: " + e.getMessage());
        } finally {
            try {
                clientSocket.close();
                System.out.println("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –∑–∞–∫—Ä—ã—Ç–æ.");
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}
